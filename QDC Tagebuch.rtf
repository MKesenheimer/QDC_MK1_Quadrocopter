{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green39\blue18;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17040\viewh14300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Arbeit am Quadrocopter\
Oder falls das zu bl\'f6d wird: https://www.kickstarter.com/projects/1387330585/hex-a-copter-that-anyone-can-fly\
\
15. - 16. Februar 2013:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Arbeit an xNQ_QDC_gemeinsam: 
\b0 Ich arbeitete weiterhin am Problem, dass die Kommunikation nicht zustande kam, wenn die UARTD0-GUI und die UARTD1-RECEIVER Schnittstelle eine zu hohe Priorit\'e4t hatten. Das Problem wurde letztendlich dadurch gel\'f6st, dass die BAUDRATE zur GUI Kommunikation mit 115200 zu gro\'df war. Ein Reduzieren auf 19200 l\'f6ste das Problem. Dadurch musste aber die MultiWii-GUI neu kompiliert werden (mit dem Programm \'84Processing\'93), da man in der GUI bl\'f6derweise die BAUDRATEs nicht \'e4ndern konnte. Au\'dferdem musste in die Main wieder die 20ms-Abfrage eingebaut werden, damit der Mikrokontroller nicht mit der Aufgabe die RC-Daten einzulesen \'fcberlastet wurde. Die Konfiguration der seriellen Schnittstellen sieht nun so aus:\
\
USARTD0-GUI:\
- BAUD 19200\
- Priorit\'e4t niedrig\
\
USARTD1-RECEIVER:\
- BAUD 38400\
- Priorit\'e4t  niedrig\
\
Der Timer E0, der einen 10ms Interrupt aufruft, hat eine mittlere Priorit\'e4t.\
Da zuerst \'fcberhaupt keine RC-Daten vom RECEIVER empfangen werden konnten (mit QDC_Main_Tests_DSL getestet), musste die Initialisierung des UARTs ge\'e4ndert werden.\
Die Variable ms10 war urspr\'fcnglich eine uint16_t Variable, was allerdings zu Problemen f\'fchrte, weil sie \'fcberlief. Sie wurde auf uint32_t ge\'e4ndert.\
\
noch Problem: Die RC-Daten werden nicht korrekt empfangen. Wird der Sender angeschaltet, ver\'e4ndern sich zwar kurz die Werte in der MultiWii-GUI, aber sie lassen sich nicht mit den Steuerkn\'fcppeln \'e4ndern. Ich vermute, dass noch irgendetwas mit den Interrupts nicht stimmt oder dass in receive.c noch ein Fehler ist.\
Dazu hab ich mir meine alten Codes (z.B. BIG5824) angeschaut, wo die RC-Daten korrekt \'fcbertragen werden.\
\

\b Arbeit an QDC_Main_Project_BIG5824: 
\b0 Alle _delay_ms() wurden durch _delay_loop_2() ausgetauscht. Ich vermutete, dass die alten Warteschleifen Probleme bereiteten. Dem war aber nicht so. Der Timer-Aufruf von E0 wurde so ge\'e4ndert, dass er nur noch alle 10ms einen Interrupt ausl\'f6st. Damit verhindere ich hohe Interruptauslastung.\
\

\b Arbeit an QuadroCalibration:
\b0  Aufgrund der Hardware\'e4nderung, dass die Kommunikation jetzt nicht mehr \'fcber den Arduino, sondern direkt \'fcber die serielle Schnittstelle l\'e4uft, wurde der Default-Wert beim PopUp der BAUDRATEs auf 19200 ge\'e4ndert.\
\
23. Februar
\b \
Arbeit an xNQ_QDC_gemeinsam: 
\b0 Das Empfangen der RcDaten funktioniert einigerma\'dfen. Ich bin mir noch nicht sicher, ob die Kanalzuordnung stimmt. Zuerst \'e4nderten sich die Werte in der GUI nicht (Fehler der vergangenen Woche), weil das Intervall der rcData[] Werte nicht passte und ein Constrain() sie auf 100 einschr\'e4nkte. Au\'dferdem kalibriert sich das ACC manchmal wieder neu, danach hatte ACC_Z einen zu niedrigen Wert. Letzteres wurde dadurch korrigiert, dass das Vorzeichen beim Lesen der ACC_Z Werte aus dem ADC ge\'e4ndert wurde. Nun k\'f6nnen die ACC_Z Werte allerdings nach einem Kalibrationsvorgang sehr gro\'df sein, was allerdings egal ist, denn sie werden jetzt wieder richtig korrigiert. Das zuf\'e4llige Einsetzen der Kalibration bleibt allerdings weiterhin ungekl\'e4rt. Vielleicht hat es tats\'e4chlich mit St\'f6rungen des RC_Empf\'e4ngers zu tun oder die Kalibrationsvorg\'e4nge werden durch die GUI getriggert. Diese Idee ist vielleicht gar nicht so abwegig, denn der QDC kalibriert sich nicht neu, wenn er nicht an die GUI angeschlossen ist.\
Bleibt also noch die Frage zu kl\'e4ren, warum ein Kalibrationsvorgang ausgel\'f6st wird, wenn rcData[ROLL] oder PITCH sehr gro\'df ist -> sind das die f.ARMED Abfragen?\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf2 8. Juli (Updates vom 22. September)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf2 Hinweise: 
\b0 Es ist jedes mal ein Problem alles zum Laufen zu bekommen, wenn man schon lange nichts mehr am Quadrocopter gearbeitet hat. Deshalb hier die Kurzzusammenfassung, was getan werden muss um den Quadrocopter mit dem Host (Computer) zu verbinden.\
- Um den Quadrocopter mit dem Programm 
\i MultiWiiConf 
\i0 (zu finden in 
\i Firmware QDC MK I/Host Software
\i0 ) zu verbinden muss der Quadrocopter mit der Firmware 
\i xNQ_QDC_gemeinsam 
\i0 geflasht werden.\
- Um den Quadrocopter mit dem Programm 
\i QuadroCalibration 
\i0 zu verbinden muss der Quadrocopter mit der Firmware 
\i QDC_Main_Project 
\i0 oder 
\i QDC_Main_Project_BIG5824 
\i0 geflasht werden.\
- Auf der Arduino-Seite reicht es die Datenleitungen (gelb und wei\'df) in die schwarze Headerleiste einzustecken. Es muss keine spezielle Software auf den Arduino installiert werden. Zur Sicherheit kann das Programm 
\i SoftwareSerial 
\i0 (zu finden in 
\i Firmware QDC MK I/Host Software/Arduino Programm/SoftwareSerial
\i0 ) geladen werden.\
- Au\'dferdem darauf achten, dass die Spannung des Arduinos auf 3.3V eingestellt ist!\
- Falls die Verbindung nicht zustande kommt, den Quadrocopter neu starten oder den Akku des Quadrocopters aufladen.\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Arbeit an DSM2 \'dcbertragung: 
\b0 Weiterhin Problem, dass die RC-Roll-Werte nicht ankommen. Mit dem Arduino-Oszilloskop wurde allerdings gemessen, dass sich die Impulsbreite \'e4ndert, wenn der Roll-Kn\'fcppel bewegt wird. Also kann es nicht an der Fernsteuerung liegen. Liegt es am rx31 oder an der Software?\
\
17. Juli\

\b Arbeit an der Hardware: 
\b0 Endlich! Das Problem mit den Roll-Werten ist gel\'f6st! Nachdem ich einen neuen Empf\'e4nger rx31c-K1 gekauft habe, funktioniert alles auf Anhieb. Den alten Empf\'e4nger (rx31b-F) konnte ich Umtauschen und erhielt daf\'fcr einen weiteren rx31c-K1, den ich nun in Domis Quadrocopter einbaue.\
Der 35MHz Sender (Robbe Futaba FX-14) wird nun auf Ebay verkauft und daf\'fcr ein \'84Pommessender\'93 MLP4DSM von EFLITE f\'fcr Domi gekauft.\
\
7. September\

\b Arbeit an den TODOs: 
\b0 QDX_Main_Project l\'e4sst sich nun wieder kompilieren. (Klammerfehler in config.c)\
\
19. September\

\b Arbeit an der Hardware: 
\b0 Beide Quadrocopter wurden nun mit dem rx31c-K1 aufger\'fcstet, sodass beide Quadrocopter mit der DX6i, d.h. Spektrum-f\'e4hig sind. Hier die neue \'dcbersicht der belegten Ports:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf2 USARTD0: rx31b-K1 Empf\'e4nger\
USARTD1: Debug-Schnittstelle zum Host\cf0 \
Au\'dferdem wurde ein Splitter gebaut, der die serielle Debug-Schnittstelle von der JTAGICE3-Schnittstelle trennt. Jetzt kann gleichzeitig programmiert und auf der Debug-Schnittstelle Daten gesammelt werden, ohne dass umgesteckt werden muss!\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Arbeit an QDC_Main_Project: 
\b0 Hier wurde mit der Umstellung des Programmcodes auf die neue Verkabelung begonnen (RC=USARTD0, DEBUG=USARTD1).\
Allerdings funktioniert das Empfangen der RC-Daten noch nicht (TODO!).\
\
22. September\

\b Arbeit an QDC_Main_Project_BIG5824: 
\b0 Die Software wurde auf die Verkabelung mit dem rx31b-K1 Empf\'e4ngers umgestellt. Die Warnungen wurden entfernt.\

\b Arbeit an QDC_Main_Project: 
\b0 Die Software wurde auf die Verkabelung mit dem rx31b-K1 Empf\'e4ngers umgestellt. Die Warnungen wurden entfernt.\
\
23.-24. September\

\b Arbeit an QDC_Main_Project_BIG5824:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs22 \cf0 - Blinken der LEDs wurde eingebaut\
- Ausgabe auf die Motoren wurde programmiert\
- Verbesserungen am PID Algorithmus
\fs24 \
- erste Versuche den Quadrocopter mit dieser Software fliegen zu lassen -> PID muss noch besser eingestellt werden
\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
25. September\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Arbeit an QDC_Main_Project_BIG5824: 
\b0 Ein Kalman Filter wurde erfolgreich implementiert. Dazu war http://robottini.altervista.org/tag/complementary-filter hilfreich.\
Das ganze Quadrocopter Projekt wurde ein bisschen besser strukturiert und auf Github hochgeladen. Das Projekt hei\'dft jetzt "QDC_MK1_Quadrocopter" und ist ein Ableger von QDC_Main_Project_BIG5824. \

\b QDC_Main_Project_BIG5824 
\b0 hei\'dft jetzt 
\b QDC_MK1_Quadrocopter.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 Au\'dferdem wurde serial.c \'fcberarbeitet. Der Code ist nun eleganter und k\'fcrzer.\
\
26.-29. September\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Arbeit an
\b0  
\b QDC_MK1_Quadrocopter: 
\b0 In der GUI wurde eine Debug-Option eingebaut. Jetzt k\'f6nnen mit Check-Boxen zehn verschiedene Debug-Werte ausgew\'e4hlt und geplottet werden. Das Programm kann noch mit dem Einsatz von Arrays verbessert werden.\
Au\'dferdem werden die Motorwerte und die cycle time w\'e4hrend der Konfiguration angezeigt, was ebenfalls die Fehlersuche bzw. das Einstellen des QDC erleichtert. In pid.c wurde der Constrain der Integralwerte herabgesetzt, so reagiert der QDC schneller auf andauernde St\'f6rungen. Der LowPassFilter wurde wieder auf 42Hz ge\'e4ndert und der SecondOrderComplementaryFilter wird wieder benutzt, was denke ich gute Resultate erzielt.\
Flugversuche sehen vielversprechend aus.\
\

\b TODO:
\b0 \
- TODOs in IMU.c
\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 - Ausprobieren: Kalman Filter, DLPF = 12.5Hz (http://www.instructables.com/id/PCB-Quadrotor-Brushless/?ALLSTEPS, Video ganz unten)\
- vom Projekt BIG5824 die RC_Routinen \'fcbernehmen damit auch im gemeinsamen Projekt die RC-Daten korrekt \'fcbertragen werden.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 In ferner Zukunft TODO:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 - Die serielle Kommunikation in QuadroCalibration.app \'e4ndern: Erst auf Nachfrage der GUI soll der QDC einen bestimmten Wert senden.\
}